name: Lighthouse CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'

jobs:
  lhci:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      # Optional: App token for GitHub annotations/comments
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Lighthouse CI
        run: |
          npm i -g @lhci/cli@0.13.x
      - name: Prepare environment
        env:
          STAGING_FRONTEND_URL: ${{ vars.STAGING_FRONTEND_URL }}
          LHCI_SERVER_BASE_URL: ${{ vars.LHCI_SERVER_BASE_URL }}
          # Prefer direct secret if present; indirection via vars.LHCI_TOKEN_KEY is optional
          DIRECT_LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
          INDIRECT_LHCI_TOKEN: ${{ secrets[vars.LHCI_TOKEN_KEY] }}
        run: |
          if [ -z "$STAGING_FRONTEND_URL" ] || [ "$STAGING_FRONTEND_URL" = "null" ] || [ "$STAGING_FRONTEND_URL" = "undefined" ]; then
            # Default to production if staging URL is not configured
            echo "TARGET_URL=https://woo-combine.com" >> $GITHUB_ENV
          else
            echo "TARGET_URL=$STAGING_FRONTEND_URL" >> $GITHUB_ENV
          fi
          echo "LHCI_SERVER_BASE_URL=$LHCI_SERVER_BASE_URL" >> $GITHUB_ENV
          # Resolve LHCI_TOKEN with priority: direct secret > indirect via key > empty
          if [ -n "$DIRECT_LHCI_TOKEN" ]; then
            echo "LHCI_TOKEN=$DIRECT_LHCI_TOKEN" >> $GITHUB_ENV
          elif [ -n "$INDIRECT_LHCI_TOKEN" ]; then
            echo "LHCI_TOKEN=$INDIRECT_LHCI_TOKEN" >> $GITHUB_ENV
          else
            echo "LHCI_TOKEN=" >> $GITHUB_ENV
          fi
      - name: Debug configuration
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "TARGET_URL=$TARGET_URL"
          if [ -n "$LHCI_SERVER_BASE_URL" ]; then echo "LHCI_SERVER_BASE_URL set"; else echo "LHCI_SERVER_BASE_URL not set"; fi
          if [ -n "$LHCI_TOKEN" ]; then echo "LHCI_TOKEN set"; else echo "LHCI_TOKEN not set (ok if not persisting to server)"; fi
          if [ -n "$LHCI_GITHUB_APP_TOKEN" ]; then echo "LHCI_GITHUB_APP_TOKEN set"; else echo "LHCI_GITHUB_APP_TOKEN not set (ok if not annotating PRs)"; fi
      - name: Run Lighthouse (mobile)
        run: |
          lhci autorun --collect.url="$TARGET_URL" --collect.settings.preset=mobile --assert.assertions.performance=error:85 --assert.assertions.accessibility=error:90 --assert.assertions."best-practices"=error:90 || true
      - name: Generate Lighthouse summary markdown
        run: |
          mkdir -p docs/qa
          JSON=$(ls -1 .lighthouseci/*-lhr.json 2>/dev/null | head -n1 || true)
          if [ -n "$JSON" ]; then
            P=$(jq -r '.categories.performance.score * 100' "$JSON")
            A=$(jq -r '.categories.accessibility.score * 100' "$JSON")
            B=$(jq -r '.categories["best-practices"].score * 100' "$JSON")
            S=$(jq -r '.categories.seo.score * 100' "$JSON")
            TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            cat > docs/qa/lighthouse-summary.md <<EOF
### Lighthouse CI (mobile)

Target: ${TARGET_URL}

Scores (latest):
- Performance: ${P}
- Accessibility: ${A}
- Best Practices: ${B}
- SEO: ${S}

Timestamp: ${TS}

Artifacts: see docs/qa/lighthouse-report.html and workflow artifacts.
EOF
          else
            echo "No Lighthouse JSON found; skipping summary update";
          fi
      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
      - name: Commit Lighthouse HTML to repo (manual runs only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Copy best index.html to docs/qa/lighthouse-report.html if present
          mkdir -p docs/qa
          REPORT_HTML=$(ls -1 .lighthouseci/*report.html 2>/dev/null | head -n1 || true)
          if [ -n "$REPORT_HTML" ]; then cp "$REPORT_HTML" docs/qa/lighthouse-report.html; fi
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add docs/qa/lighthouse-report.html docs/qa/lighthouse-summary.md
          git commit -m "ci(lighthouse): update lighthouse HTML report [skip ci]" || echo "No changes to commit"
          git push

